// pages/api/transcriptions/index.js
import { prisma } from '../../../lib/prisma';
import { getToken } from 'next-auth/jwt';

export default async function handler(req, res) {
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
  
  if (!token || !token.user?.email) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const userEmail = token.user.email;

  if (req.method === 'GET') {
    // Get all transcriptions for user
    try {
      const transcriptions = await prisma.transcription.findMany({
        where: { userEmail },
        orderBy: { createdAt: 'desc' },
        take: 50, // Limit to last 50
      });

      return res.status(200).json({ transcriptions });
    } catch (error) {
      console.error('Error fetching transcriptions:', error);
      return res.status(500).json({ error: 'Failed to fetch transcriptions' });
    }
  }

  if (req.method === 'POST') {
    // Create new transcription entry
    const { assemblyAiId, fileName, language, duration, wordCount } = req.body;

    if (!assemblyAiId) {
      return res.status(400).json({ error: 'assemblyAiId is required' });
    }

    try {
      const transcription = await prisma.transcription.create({
        data: {
          assemblyAiId,
          userEmail,
          fileName,
          language,
          duration,
          wordCount,
          title: null, // Will be generated by Gemini
          titleGenerating: true,
        },
      });

      return res.status(201).json({ transcription });
    } catch (error) {
      console.error('Error creating transcription:', error);
      
      // Handle duplicate assemblyAiId
      if (error.code === 'P2002') {
        return res.status(409).json({ error: 'Transcription already exists' });
      }
      
      return res.status(500).json({ error: 'Failed to create transcription' });
    }
  }

  return res.status(405).json({ error: 'Method not allowed' });
}
